"""This script provides basic utility commands for managing the API"""

import os
import sys

from scripts import dump_test_data, empty_db_tables, load_test_data


def install():
    """Installs all python requirements"""
    os.system("pip install -r requirements.txt & pip install -r requirements-dev.txt")


def run_linter():
    """Runs linter"""
    os.system("pylint mod")


def run_tests():
    """Runs pytest and provides coverage information when '--cov' is provided"""
    if len(sys.argv) == 3:
        if sys.argv[2] == "--cov":
            os.system("pytest mod --cov")
        else:
            print("Wrong parameters")
    else:
        os.system("pytest mod")


def format():
    """Formats API as specified from GitHub CI"""
    os.system("black . & isort .")


def build():
    """Builds API as specified from GitHub CI"""
    os.system("mypy mod & pylint mod & pytest mod --cov")


def clear_db():
    """Clears data rows in database"""
    empty_db_tables.empty_db()


def reset_db():
    """Clears database entries and loads test data"""
    clear_db()
    load_test_data.load()


def create_migration():
    """Creates a database migration with alembic"""
    os.system("alembic revision --autogenerate")
    print(
        "Be sure to proofread the autogenerated migration! After that, the migration can be applied with the 'migration-apply'-command"
    )


def apply_migration():
    """Applies a database migration with alembic"""
    os.system("alembic upgrade head")


def print_commands():
    """Prints available commands"""
    print("No command provided. Available commands: ")
    for key in commands.keys():
        print(key)


commands = {
    "install": install,
    "lint": run_linter,
    "test": run_tests,
    "format": format,
    "build": build,
    "data-load": load_test_data.load,
    "data-dump": dump_test_data.dump,
    "db-clear": clear_db,
    "db-reset": reset_db,
    "migration-create": create_migration,
    "migration-apply": apply_migration,
}

if len(sys.argv) == 1:
    print_commands()
elif len(sys.argv) >= 3 and sys.argv[1] != "test":
    print("Too many arguments provided")
else:
    commands[sys.argv[1]]()
